{
  "name": "rfxcom",
  "version": "0.7.9",
  "author": {
    "name": "Kevin McDermott",
    "email": "kevin@bigkevmcd.com"
  },
  "dependencies": {
    "serialport": "~1.4.0"
  },
  "main": "rfxcom.js",
  "devDependencies": {
    "jasmine-node": "*",
    "jshint": "*"
  },
  "scripts": {
    "test": "jasmine-node test",
    "watch": "jasmine-node --autotest ."
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/bigkevmcd/node-rfxcom.git"
  },
  "bugs": {
    "url": "https://github.com/bigkevmcd/node-rfxcom/issues"
  },
  "readme": "Evented communication with RFXtrx433.\n=====================================\n\nHow to Use\n==========\n\nrfxcom depends on the serialport module.\n\nTo install\n----------\n\n<pre>\n  npm install rfxcom\n</pre>\n\nThe only dependency is serialport 1.0.6+.\n\nTo Use\n------\n\n<pre>\nvar rfxcom = require('rfxcom'),\n    pg = require('pg').native,\n    conString = \"pg://user:password@localhost/user\",\n    client = new pg.Client(conString);\n\nvar rfxtrx = new rfxcom.RfxCom(\"/dev/ttyUSB0\", {debug: true});\n\n/*\n * This reports security updates from X10 security devices.\n */\nrfxtrx.on(\"security1\", function (evt) {\n  if (evt.deviceStatus === rfxcom.security.MOTION) {\n    console.log(\"Device %s %s detected motion.\", evt.subtype, evt.id);\n  } else if (evt.deviceStatus === rfxcom.security.NOMOTION) {\n    console.log(\"Device %s %s reported motion stopped.\", evt.subtype, evt.id);\n  }\n});\n\nrfxtrx.on(\"elec2\", function (evt) {\n  // Requires a PostgreSQL table\n  // CREATE TABLE energy (recorded_time timestamp DEFAULT NOW(),\n  //                      device_id VARCHAR, current_watts FLOAT)\n  client.query(\"INSERT INTO energy(device_id, current_watts) values($1, $2)\",\n                [evt.id, evt.currentWatts]);\n});\n\nrfxtrx.initialise(function () {\n    console.log(\"Device initialised\");\n});\n</pre>\n\nLightwaveRf\n-----------\nThere's a specialised Lighting5 prototype, which uses an RfxCom object.\n\n<pre>\nvar rfxcom = require('rfxcom');\n\nvar rfxtrx = new rfxcom.RfxCom(\"/dev/ttyUSB0\", {debug: true}),\n    lightwaverf = new rfxcom.Lighting5(rfxtrx, rfxcom.lighting5.LIGHTWAVERF);\n\nrfxtrx.initialise(function () {\n  console.log(\"Device initialised\");\n  lightwaverf.switchOn(\"0xF09AC8/1\", {mood: 0x03});\n  lightwaverf.switchOn(\"0xF09AC8/2\", {level: 0x10});\n});\n</pre>\n\nI've tested it with both LightwaveRf lights, and the relay switch.\n\nLightwaveRf lights get their identity from the remote used to pair, if you don't\nhave a remote, or if you want to specify the address manually, you can pair the\ndevice by putting the device into pairing mode and turning on a device id, lightwaverf.switchOn(\"0xFFFFFF/1\").\n\nThe device ids don't have to be unique, but it's advisable.\n\nLighting2\n---------\nThere's a specialised Lighting2 prototype, which uses an RfxCom object.\n\n<pre>\n    var rfxtrx = new rfxcom.RfxCom(\"/dev/ttyUSB0\", {debug: true}),\n        lighting2 = new rfxcom.Lighting2(rfxtrx, rfxcom.lighting2.HOMEEASY_EU);\n\n    lighting2.switchOn(\"0xF09AC8AA/1\");\n    lighting2.switchOff(\"0xF09AC8AA/1\");\n</pre>\n\nThe lighting2 message controls one of three subtypes, you need to specify the\nsubtype to the constructor, the options are in rfxcom.lighting2.\n\n\nRfxCom events\n=============\n\nThe events are named from the message identifiers sent by the RFXtrx device.\n\n\"ready\"\n-------\nEmitted when the RFXcom has successfully opened the serial port.\n\n\"response\"\n----------\nEmitted when a response message is received from the RFXtrx 433, sends the\nstatus (from the RFXtrx433) and the sequence number of the message the response\nis for.\n\n\"status\"\n--------\nEmitted when a \"status\" message is received from the RFXtrx 433.\n\n\"end\"\n--------\nEmitted when the serial port \"ends\".\n\n\"receive\"\n---------\nEmitted when any message is received from the RFXtrx 433, sends the raw bytes that were received.\n\n\"elec2\"\n-------\nEmitted when data is received from OWL electricity monitoring devices\nCM119/CM160.\n\n\"security1\"\n-----------\nEmitted when an X10 security device reports a status change.\n\n\"lighting5\"\n-----------\nEmitted when a message is received from LightwaveRF type devices.\n\n\"th1-9\"\n-------\nEmitted when a message is received from Oregon Scientific\nTemperature/Humidity sensors.\n\n\"temp1-9\"\n---------\nEmitted when a message is received from an Oregon Scientific temperature\nsensor.\n\n\"lighting2\"\n-----------\nEmitted when a message is received from AC/HomeEasy type devices.\n",
  "readmeFilename": "README.md",
  "description": "Evented communication with RFXtrx433. =====================================",
  "homepage": "https://github.com/bigkevmcd/node-rfxcom",
  "_id": "rfxcom@0.7.9",
  "_shasum": "2a37fd9b903772d53deb23d967473f2e6e3751aa",
  "_from": "rfxcom@",
  "_resolved": "https://registry.npmjs.org/rfxcom/-/rfxcom-0.7.9.tgz"
}
