var sinon = require('sinon');
var util = require('util');
/* exported should */
var should = require('should');
var winston;
var logger;

function get_line(severity, message, meta, module) {
    var sev = [ '[', severity, ']' ].join('');
    var mod = module ? [ '[', module, ']' ].join('') : undefined;
    var met = meta ? util.inspect(meta) : undefined;
    return [ mod, sev, message, met ].join(' ');
}

describe('Arguments processing', function() {
    before(function() {
        this.level = 'warning';
        this.msg = 'ABCDEFGHIJK';
        this.module = 'module';
    });

    beforeEach(function() {
        winston = require('winston');
        this.spy = sinon.spy(winston, 'log');
    });

    it('defaults not configuring', function(done) {
        logger = require('../index.js');
        logger[this.level](this.msg);
        var log_line = get_line(this.level, this.msg);
        logger.console.should.be.equal(true);
        logger.level.should.be.equal('debug');
        logger.name.should.be.equal('anonymous');
        sinon.assert.calledOnce(this.spy);
        sinon.assert.alwaysCalledWithExactly(this.spy, this.level, log_line, null, null);
        done();
    });

    it('defaults configuring only name', function(done) {
        logger = require('../index.js');
        logger.config('test');
        logger[this.level](this.msg);
        var log_line = get_line(this.level, this.msg);
        logger.console.should.be.equal(true);
        logger.level.should.be.equal('debug');
        logger.name.should.be.equal('test');
        sinon.assert.calledOnce(this.spy);
        sinon.assert.alwaysCalledWithExactly(this.spy, this.level, log_line, null, null);
        done();
    });

    it('defaults configuring name and using module', function(done) {
        logger = require('../index.js');
        logger.config('test');
        logger[this.level](this.module, this.msg);
        var log_line = get_line(this.level, this.msg, undefined, 'module');
        logger.console.should.be.equal(true);
        logger.level.should.be.equal('debug');
        logger.name.should.be.equal('test');
        sinon.assert.calledOnce(this.spy);
        sinon.assert.alwaysCalledWithExactly(this.spy, this.level, log_line, null, null);
        done();
    });

    it('Arguments given --console false --logleve=info', function(done) {
        process.argv.push('--console');
        process.argv.push('false');
        process.argv.push('--loglevel=info');

        logger = require('../index.js');
        logger.config('test');
        logger[this.level](this.module, this.msg);
        var log_line = get_line(this.level, this.msg, undefined, 'module');

        logger.console.should.be.equal(false);
        logger.level.should.be.equal('info');
        logger.name.should.be.equal('test');
        sinon.assert.calledOnce(this.spy);
        sinon.assert.alwaysCalledWithExactly(this.spy, this.level, log_line, null, null);
        done();
    });

    afterEach(function() {
        this.spy.reset();
        delete require.cache[require.resolve('ionpad-winston')];
        delete require.cache[require.resolve('winston')];
        delete require.cache[require.resolve('../index.js')];
    });

    after(function() {
        process.argv.pop();
        process.argv.pop();
        process.argv.pop();
        this.spy.reset();
    });
});

describe('Log Messages', function() {
    before(function() {
        winston = require('winston');
        this.spy = sinon.spy(winston, 'log');
        logger = require('../index.js');
        logger.config('TESTS');
        this.levels = Object.keys(winston.config.syslog.levels);
        this.msg = 'QWERTYUIOP';
        this.module = 'MODULE_TESTS';
    });

    it('Logs just msg', function(done) {
        var self = this;
        this.levels.forEach(function(el) {
            logger[el](self.msg);
            sinon.assert.calledOnce(self.spy);
            var log_line = get_line(el, self.msg);
            sinon.assert.alwaysCalledWithExactly(self.spy, el, log_line, null, null);
            self.spy.reset();
        });

        done();
    });

    it('Logs with msg + meta', function(done) {
        var obj = {
            a : 'a',
            b : 1,
            c : true
        };

        var self = this;
        this.levels.forEach(function(el) {
            logger[el](self.msg, obj);
            sinon.assert.calledOnce(self.spy);
            var log_line = get_line(el, self.msg, obj);
            sinon.assert.alwaysCalledWithExactly(self.spy, el, log_line, null, null);
            self.spy.reset();
        });

        done();
    });

    it('Logs with module + msg + meta', function(done) {
        var obj = {
            a : 'a',
            b : 1,
            c : true
        };

        var self = this;
        this.levels.forEach(function(el) {
            logger[el](self.module, self.msg, obj);
            sinon.assert.calledOnce(self.spy);
            var log_line = get_line(el, self.msg, obj, self.module);
            sinon.assert.alwaysCalledWithExactly(self.spy, el, log_line, null, null);
            self.spy.reset();
        });

        done();
    });

    it('Logs with just module + msg', function(done) {
        var self = this;
        this.levels.forEach(function(el) {
            logger[el](self.module, self.msg);
            sinon.assert.calledOnce(self.spy);
            var log_line = get_line(el, self.msg, undefined, self.module);
            sinon.assert.alwaysCalledWithExactly(self.spy, el, log_line, null, null);
            self.spy.reset();
        });

        done();
    });

    after(function() {
        this.spy.reset();
        delete require.cache[require.resolve('ionpad-winston')];
        delete require.cache[require.resolve('winston')];
        delete require.cache[require.resolve('../index.js')];
    });
});

describe('Log Trace', function() {
    before(function() {
        winston = require('winston');
        this.spy = sinon.spy(winston, 'log');
        logger = require('../index.js');
        logger.config('TESTS');
    });

    it('Log trace with module + label', function(done) {
        logger.trace('MODULE', 'LABEL');
        sinon.assert.calledOnce(this.spy);
        var args = this.spy.args[0];
        args[0].should.be.equal('error');
        args[1].indexOf('Trace').should.not.be.equal(-1);
        args[1].indexOf('[MODULE]').should.not.be.equal(-1);
        args[1].indexOf('LABEL').should.not.be.equal(-1);
        done();
    });

    it('Log trace with just label', function(done) {
        logger.trace('LABEL');
        sinon.assert.calledOnce(this.spy);
        var args = this.spy.args[0];
        args[0].should.be.equal('error');
        args[1].indexOf('LABEL').should.not.be.equal(-1);
        args[1].indexOf('[LABEL]').should.be.equal(-1);
        done();
    });

    it('Just Log trace', function(done) {
        logger.trace();
        sinon.assert.calledOnce(this.spy);
        var args = this.spy.args[0];
        args[0].should.be.equal('error');
        args[1].indexOf('Trace').should.not.be.equal(-1);
        done();
    });

    afterEach(function(){
        this.spy.reset();
    });
});

