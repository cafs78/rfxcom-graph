var winston = require('winston');
var configure_winston = require('ionpad-winston').configure;
var util = require('util');

var minimist = require('minimist');
var minimist_opts = {
    boolean : 'console' ,
    string : 'loglevel' ,
    default : {
        console : true,
        loglevel : 'debug'
    }
};

var argv = minimist(process.argv, minimist_opts);

var log_level = argv.loglevel;
var console_opt = argv.console;

/**
 * Initializes the looger object
 */
function Logger() {
    this.configured = false;
}

/**
 * Will config the name for logger.
 */
Logger.prototype.config = function(name) {
    if (!this.configured) {
        if (!name) {
            name = 'anonymous';
        }

        configure_winston(name, log_level, console_opt);
        this.configured = true;
        this.name = name;
        this.level = log_level;
        this.console = console_opt;
    }
};

/**
 * Dynamic prototype methods generation, extending winston
 * We accept up to 3 arguments to logs:
 *   * module : module to append to logs
 *   * msg : message to log (is the only mandatory field)
 *   * meta : Additional object to print in logs
 */
Object.keys(winston.config.syslog.levels).forEach(function(severity) {
    Logger.prototype[severity] = function(module, msg, meta) {
        var sev = [ '[', severity, ']' ].join('');
        if (!this.configured) {
            this.config();
        }

        /* Process Arguments */
        if (!meta) { /* up to 2 params */
            if (!msg) { /* just 1 param */
                msg = module;
                module = undefined;
            } else if (typeof msg === 'object') { /* msg + meta */
                meta = msg;
                msg = module;
                module = undefined;
            }
        } /* else 3 params */

        var meta_data = meta ? util.inspect(meta) : undefined;
        var mod = module ? [ '[', module, ']' ].join('') : undefined;
        var log_message = [ mod, sev, msg, meta_data].join(' ');
        winston[severity](log_message);
    };
});

/**
 * It will act as console.trace() but logging using winston.
 * It will be logged as error
 */
Logger.prototype.trace = function(module, label) {
    if (!label) {
        label = module;
        module = undefined;
    }

    var err = new Error();
    err.name = 'Trace';
    err.message = label || '';
    Error.captureStackTrace(err, this.trace);
    this.error(module, err.stack);
};

module.exports = new Logger();
